initSidebarItems({"fn":[["any_value","A matcher which always matches."],["assertion_always_fails","A matcher which never matches."],["assertion_always_succeeds","A matcher which always matches."],["close_to","Matches if the asserted value is in an epsilon range around the expected value."],["eq","Matches if the asserted value is equal to the expected value."],["equal_to","Matches if the asserted value is equal to the expected value."],["geq","Matches if the asserted value is greater than or equal to the expected value."],["greater_than","Matches if the asserted value is greater than the expected value."],["greater_than_or_equal","Matches if the asserted value is greater than or equal to the expected value."],["gt","Matches if the asserted value is greater than the expected value."],["has","Accepts a matcher and returns it unmodified."],["is","Accepts a matcher and returns it unmodified."],["leq","Matches if the asserted value is less than or equal to the expected value."],["less_than","Matches if the asserted value is less than the expected value."],["less_than_or_equal","Matches if the asserted value is less than or equal to the expected value."],["lt","Matches if the asserted value is less than the expected value."],["no_value","A matcher which never matches."],["not","A matcher negating the result of the passed matcher."],["same_object","Matches if asserted value and the expected value are truely the same object."]],"mod":[["collection","The collection module contains matchers for asserting properties of collections and iterators."],["variant","The variant module contains matchers for asserting properties of enums and convienience functions for Option and Result."]],"struct":[["All","A `Matcher` struct which joins multiple `Matcher`s conjunctively."],["Any","A `Matcher` struct which joins multiple `Matcher`s disjunctively."]]});